class Drawing{}class LinesAnimation{constructor(t,r,s){this.ctx=t,this.loaded=!1,this.isPlaying=!1,this.drawings=[],this.layers=[],this.currentFrame=0,this.currentFrameCounter=0,this.lps=r||12,this.fps=r||12,this.lineInterval=1e3/this.lps,this.intervalRatio=1,this.mixedColors=s||!0,this.rndr={off:{x:0,y:0},speed:{x:0,y:0}},this._state="default",this.states={default:{start:0,end:0}},this.over={},this.override=!0}set fps(t){this._fps=+t,this.intervalRatio=this.lineInterval/(1e3/+t)}get fps(){return this._fps}set lps(t){this._lps=+t,this.lineInterval=1e3/+t,this.intervalRatio=this.lineInterval/(1e3/this.fps)}get lps(){return this._lps}set frame(t){this.currentFrame=this.currentFrameCounter=+t,this.states.default&&this.states.default.end!=this.endFrame&&(this.states.default.end=this.endFrame)}get frame4(){return+this.currentFrameCounter.toFixed(4)}get endFrame(){return this.layers.length>0?Math.max.apply(Math,this.layers.map(t=>t.f.e)):0}get currentState(){return this.states[this.state]}set state(t){this._state!=t&&this.states[t]&&(this._state=t,this.currentState&&(this.frame=this.currentState.start))}get state(){return this._state}overrideProperty(t,r){this.over[t]=r,this.override=!0}cancelOverride(){this.over={},this.override=!1}update(){this.isPlaying&&(this.currentFrame<=this.currentState.end&&(this.currentFrameCounter+=this.intervalRatio,this.currentFrame=Math.floor(this.currentFrameCounter),this.onUpdate&&this.onUpdate()),this.frame4>=this.currentState.end+1&&(this.frame=this.currentState.start,this.onPlayedState&&this.onPlayedState()),this.onUpdate&&this.onUpdate())}draw(t,r){this.mixedColors||this.ctx.beginPath();for(let s=0,e=this.layers.length;s<e;s++){const e=this.layers[s],i=this.drawings[e.d];if(this.currentFrame>=e.f.s&&this.currentFrame<=e.f.e){this.rndr.s=0,this.rndr.e=i.length;for(const t in e)this.rndr[t]=e[t];if(t&&(this.rndr.x+=t),r&&(this.rndr.y+=r),e.t)for(let t=0;t<e.t.length;t++){const r=e.t[t];r.sf<=this.currentFrame&&r.ef>=this.currentFrame&&(this.rndr[r.prop]=Cool.map(this.currentFrame,r.sf,r.ef,r.sv,r.ev),"s"!=r.prop&&"e"!=r.prop||(this.rndr[r.prop]=Math.round(this.rndr[r.prop])))}if(this.override)for(const t in this.over)this.rndr[t]=this.over[t];this.rndr.w>0?(this.rndr.off.x=Cool.random(0,this.rndr.w),this.rndr.off.y=Cool.random(0,this.rndr.w),this.rndr.speed.x=Cool.random(-this.rndr.v,this.rndr.v),this.rndr.speed.y=Cool.random(-this.rndr.v,this.rndr.v)):(this.rndr.off.x=0,this.rndr.off.y=0,this.rndr.speed.x=0,this.rndr.speed.y=0),this.mixedColors&&this.ctx.beginPath();for(let t=this.rndr.s;t<this.rndr.e-1;t++){const r=i[t],s=i[t+1],e=new Cool.Vector(s.x,s.y);e.subtract(r),e.divide(this.rndr.n),this.ctx.moveTo(this.rndr.x+r.x+Cool.random(-this.rndr.r,this.rndr.r)+this.rndr.off.x,this.rndr.y+r.y+Cool.random(-this.rndr.r,this.rndr.r)+this.rndr.off.y);for(let t=0;t<this.rndr.n;t++){const s=new Cool.Vector(r.x+e.x*t,r.y+e.y*t);if(this.ctx.lineTo(this.rndr.x+s.x+e.x+Cool.random(-this.rndr.r,this.rndr.r)+this.rndr.off.x,this.rndr.y+s.y+e.y+Cool.random(-this.rndr.r,this.rndr.r)+this.rndr.off.y),(0==t||this.rndr.ws)&&this.rndr.w>0)for(const t in this.rndr.off)this.rndr.off[t]+=this.rndr.speed[t],(this.rndr.off[t]>=this.rndr.w||this.rndr.off[t]<=-this.rndr.w)&&(this.rndr.speed[t]*=-1)}this.ctx.strokeStyle!=this.rndr.c&&this.mixedColors&&(this.ctx.strokeStyle=this.rndr.c)}this.mixedColors&&this.ctx.stroke()}}this.mixedColors||this.ctx.stroke(),this.onDraw&&this.onDraw()}load(t,r){fetch(t).then(t=>t.json()).then(t=>{this.loadData(t,r)}).catch(t=>{console.error(t)})}loadJSON(t,r){this.loadData(t,r)}loadData(t,r){this.loaded=!0;for(let r=0;r<t.d.length;r++){const s=t.d[r];let e;if(s){e=[];for(let t=0;t<s.length;t++){const r=s[t];r?e.push({x:r[0],y:r[1]}):e.push("end")}}else e=null;this.drawings[r]=e}this.layers=t.l;for(const r in t.s)this.states[r]=t.s[r];this.states.default&&(this.states.default.end=this.endFrame),this.intervalRatio=this.lineInterval/(1e3/t.fps),t.mc&&(this.mixedColors=t.mc),this.width=t.w,this.height=t.h,r&&r(t),this.onLoad&&this.onLoad()}setOnLoad(t){this.loaded?t():this.onLoad=t}}class Range{}
//# sourceMappingURL=src_maps/base.min.js.map
